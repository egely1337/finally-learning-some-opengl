#ifndef KBD_H
#define KBD_H

#include <iostream>
#include <SDL2/SDL.h>


/**
 * The SDL virtual key representation.
 *
 * Values of this type are used to represent keyboard keys using the current
 * layout of the keyboard. These values include Unicode values representing
 * the unmodified character that would be generated by pressing the key, or an
 * SDLK_* constant for those keys that do not generate characters.
 *
 * A special exception is the number keys at the top of the keyboard which map
 * to SDLK_0...SDLK_9 on AZERTY layouts.
 *
 * The actual values that might be set for this type are listed in the
 * SDL_KeyCode (capital C) enumeration.
 */

#define SDLK_SCANCODE_MASK (1<<30)
#define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)
#define MAX_KEYS 128

typedef enum KbdKeycodes {
    KEYCODE_UNKNOWN = 0,
    KEYCODE_RETURN = '\r',
    KEYCODE_ESCAPE = '\x1B',
    KEYCODE_BACKSPACE = '\b',
    KEYCODE_TAB = '\t',
    KEYCODE_SPACE = ' ',
    KEYCODE_EXCLAIM = '!',
    KEYCODE_QUOTEDBL = '"',
    KEYCODE_HASH = '#',
    KEYCODE_PERCENT = '%',
    KEYCODE_DOLLAR = '$',
    KEYCODE_AMPERSAND = '&',
    KEYCODE_QUOTE = '\'',
    KEYCODE_LEFTPAREN = '(',
    KEYCODE_RIGHTPAREN = ')',
    KEYCODE_ASTERISK = '*',
    KEYCODE_PLUS = '+',
    KEYCODE_COMMA = ',',
    KEYCODE_MINUS = '-',
    KEYCODE_PERIOD = '.',
    KEYCODE_SLASH = '/',
    KEYCODE_0 = '0',
    KEYCODE_1 = '1',
    KEYCODE_2 = '2',
    KEYCODE_3 = '3',
    KEYCODE_4 = '4',
    KEYCODE_5 = '5',
    KEYCODE_6 = '6',
    KEYCODE_7 = '7',
    KEYCODE_8 = '8',
    KEYCODE_9 = '9',
    KEYCODE_COLON = ':',
    KEYCODE_SEMICOLON = ';',
    KEYCODE_LESS = '<',
    KEYCODE_EQUALS = '=',
    KEYCODE_GREATER = '>',
    KEYCODE_QUESTION = '?',
    KEYCODE_AT = '@',
    KEYCODE_LEFTBRACKET = '[',
    KEYCODE_BACKSLASH = '\\',
    KEYCODE_RIGHTBRACKET = ']',
    KEYCODE_CARET = '^',
    KEYCODE_UNDERSCORE = '_',
    KEYCODE_BACKQUOTE = '`',
    KEYCODE_A = 'a',
    KEYCODE_B = 'b',
    KEYCODE_C = 'c',
    KEYCODE_D = 'd',
    KEYCODE_E = 'e',
    KEYCODE_F = 'f',
    KEYCODE_G = 'g',
    KEYCODE_H = 'h',
    KEYCODE_I = 'i',
    KEYCODE_J = 'j',
    KEYCODE_K = 'k',
    KEYCODE_L = 'l',
    KEYCODE_M = 'm',
    KEYCODE_N = 'n',
    KEYCODE_O = 'o',
    KEYCODE_P = 'p',
    KEYCODE_Q = 'q',
    KEYCODE_R = 'r',
    KEYCODE_S = 's',
    KEYCODE_T = 't',
    KEYCODE_U = 'u',
    KEYCODE_V = 'v',
    KEYCODE_W = 'w',
    KEYCODE_X = 'x',
    KEYCODE_Y = 'y',
    KEYCODE_Z = 'z',
};

typedef struct {
    bool m_IsPressed;
} Key;

class Keyboard {
public:
    static Keyboard GetInstance();
    void HandleEvent(SDL_Event& Event);
    bool IsPressed(KbdKeycodes Keycode);
protected:
    Key m_Keys[MAX_KEYS];
};
#endif